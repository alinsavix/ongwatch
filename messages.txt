# eventsub types

class DonationAmount(TypedDict):
    """
    Represents the amount of a donation.

    Attributes
    ----------
    value: int
        The value of the donation.
    decimal_places: int
        The number of decimal places in the donation value.
    currency: str
        The currency code (e.g., USD) of the donation.
    """
    value: int
    decimal_places: int
    currency: str


class CheerEvent(SpecificBroadcaster):
    """
    Represents a channel cheer event on Twitch.

    Attributes
    ----------
    is_anonymous: bool
        Indicates whether the cheer was made anonymously.
    user_id: Optional[str]
        The ID of the user who made the cheer, if not anonymous.
    user_login: Optional[str]
        The login name of the user who made the cheer, if not anonymous.
    user_name: Optional[str]
        The display name of the user who made the cheer, if not anonymous.
    message: str
        The message accompanying the cheer.
    bits: int
        The number of bits cheered.
    """
    is_anonymous: bool
    user_id: Optional[str]
    user_login: Optional[str]
    user_name: Optional[str]
    message: str
    bits: int

# Bits use
class Emote(TypedDict):
    """
    Represents metadata about an emote.

    Attributes
    ----------
    id: str
        The unique identifier for the emote.
    emote_set_id: str
        The identifier for the emote set the emote belongs to.
    owner_id: str
        The ID of the broadcaster who owns the emote.
    format: list of {'animated', 'static'}
        Available formats for the emote (e.g., static PNG or animated GIF).
    """
    id: str
    emote_set_id: str
    owner_id: str
    format: List[Literal["animated", "static"]]


class Cheermote(TypedDict):
    """
    Represents metadata about a cheermote.

    Attributes
    ----------
    prefix: str
        The prefix of the Cheermote string used in chat.
    bits: int
        The number of Bits cheered.
    tier: int
        The tier level of the cheermote.
    """
    prefix: str
    bits: int
    tier: int


class Fragment(TypedDict):
    """
    Represents a fragment of a chat message.

    Attributes
    ----------
    text: str
        The message text within the fragment.
    type: Literal["text", "cheermote", "emote"]
        The type of fragment (text, cheermote, or emote).
    emote: Optional[Emote]
        Metadata about the emote if the fragment contains one.
    """
    text: str
    type: Literal["text", "cheermote", "emote"]
    emote: Optional[Emote]


class Message(TypedDict):
    """
    Represents a chat message with potential emotes and cheermotes.

    Attributes
    ----------
    text: str
        The complete message in plain text.
    fragments: list of Fragment
        The ordered list of message fragments.
    """
    text: str
    fragments: List[Fragment]


class PowerUp(TypedDict):
    """
    Represents a Power-up event in chat.

    Attributes
    ----------
    type: Literal["message_effect", "celebration", "gigantify_an_emote"]
        The type of Power-up effect.
    emote: Optional[Emote]
        Associated emote with the Power-up.
    message_effect_id: Optional[str]
        The ID of the message effect.
    """
    type: Literal["message_effect", "celebration", "gigantify_an_emote"]
    emote: Optional[Emote]
    message_effect_id: Optional[str]


class BitsEvent(SpecificBroadcaster, SpecificUser):
    """
    Represents a Bits transaction event.

    Attributes
    ----------
    bits: int
        The number of Bits used.
    type: Literal["cheer", "power_up"]
        The type of Bits event.
    message: Optional[Message]
        An object containing the user message and emote information.
    cheermote: Optional[Cheermote]
        Metadata about the cheermote.
    power_up: Optional[PowerUp]
        Data about Power-up effects.
    """
    bits: int
    type: Literal["cheer", "power_up"]
    message: Optional[Message]
    cheermote: Optional[Cheermote]
    power_up: Optional[PowerUp]




class ChannelUpdateEvent(SpecificBroadcaster):
    """
    Represents an event where the broadcaster updates their channel information.

    Attributes
    ----------
    title: str
        The title of the stream.
    language: str
        The language of the stream.
    category_id: str
        The ID of the category.
    category_name: str
        The name of the category.
    content_classification_labels: List[str]
        A list of content classification labels associated with the stream.
    """
    title: str
    language: str
    category_id: str
    category_name: str
    content_classification_labels: List[str]


# Follow
class FollowEvent(SpecificBroadcaster, SpecificUser):
    """
    Represents an event where a user follows a broadcaster.

    Attributes
    ----------
    followed_at: str
        The timestamp when the follow occurred.
    """
    followed_at: str


# Subscription
class SubscribeEvent(SpecificBroadcaster, SpecificUser):
    """
    Represents an event where a user subscribes to a broadcaster's channel.

    Attributes
    ----------
    tier: str
        The tier of the subscription (e.g., Tier 1, Tier 2, Tier 3).
    is_gift: bool
        Indicates whether the subscription was gifted.
    """
    tier: str
    is_gift: bool


class SubscriptionEndEvent(SpecificBroadcaster, SpecificUser):
    """
    Represents an event where a user's subscription to a broadcaster's channel ends.

    Attributes
    ----------
    tier: str
        The tier of the subscription that ended.
    is_gift: bool
        Indicates whether the ended subscription was a gift.
    """
    tier: str
    is_gift: bool


class SubscriptionGiftEvent(SpecificBroadcaster):
    """
    Represents an event where a user gifts a subscription to another user.

    Attributes
    ----------
    user_id: Optional[str]
        The ID of the user who gifted the subscription, if available.
    user_login: Optional[str]
        The login name of the user who gifted the subscription, if available.
    user_name: Optional[str]
        The display name of the user who gifted the subscription, if available.
    total: int
        The total number of subscriptions gifted by the user.
    tier: str
        The tier of the gifted subscription (e.g., Tier 1, Tier 2, Tier 3).
    cumulative_total: Optional[int]
        The cumulative total number of subscriptions gifted by the user, if available.
    is_anonymous: bool
        Indicates whether the gift was given anonymously.
    """
    user_id: Optional[str]
    user_login: Optional[str]
    user_name: Optional[str]
    total: int
    tier: str
    cumulative_total: Optional[int]
    is_anonymous: bool


class SubscriptionMessageEvent(SpecificBroadcaster, SpecificUser):
    """
    Represents an event where a user sends a message during their subscription.

    Attributes
    ----------
    tier: str
        The tier of the subscription associated with the message.
    message: TextEmoteMessage
        The message content, which may include text and emotes.
    cumulative_months: int
        The total number of months the user has been subscribed.
    streak_months: Optional[int]
        The number of consecutive months the user has been subscribed, if available.
    duration_months: int
        The duration of the current subscription in months.
    """
    tier: str
    message: TextEmoteMessage
    cumulative_months: int
    streak_months: Optional[int]
    duration_months: int




class Cheermote(TypedDict):
    """
    Represents a cheermote used in the chat.

    Attributes
    ----------
    prefix: str
        The prefix for the cheermote.
    bits: int
        The number of bits required to use the cheermote.
    tier: int
        The tier of the cheermote.
    """
    prefix: str
    bits: int
    tier: int


class Emote(TypedDict):
    """
    Represents an emote in the chat.

    Attributes
    ----------
    id: str
        The ID of the emote.
    emote_set_id: str
        The ID of the emote set to which this emote belongs.
    owner_id: str
        The ID of the owner of the emote.
    format: List[Literal['animated', 'static']]
        The formats in which the emote is available.
    """
    id: str
    emote_set_id: str
    owner_id: str
    format: List[Literal['animated', 'static']]


class Fragment(TypedDict):
    """
    Represents a fragment of a chat message.

    Attributes
    ----------
    type: Literal['text', 'cheermote', 'emote', 'mention']
        The type of the fragment.
    text: str
        The text content of the fragment.
    cheermote: Optional[Cheermote]
        The cheermote associated with the fragment, if applicable.
    emote: Optional[Emote]
        The emote associated with the fragment, if applicable.
    mention: Optional[SpecificUser]
        The user mentioned in the fragment, if applicable.
    """
    type: Literal['text', 'cheermote', 'emote', 'mention']
    text: str
    cheermote: Optional[Cheermote]
    emote: Optional[Emote]
    mention: Optional[SpecificUser]


class TextEmoteMessage(TypedDict):
    """
    Represents a chat message containing text and emotes.

    Attributes
    ----------
    text: str
        The text of the message.
    emotes: List[str]
        A list of emote IDs present in the message.
    """
    text: str
    emotes: List[str]


class Message(TypedDict):
    """
    Represents a chat message.

    Attributes
    ----------
    text: str
        The text content of the message.
    fragments: List[Fragment]
        A list of fragments that make up the message.
    """
    text: str
    fragments: List[Fragment]


class Cheer(TypedDict):
    """
    Represents a cheer in the chat.

    Attributes
    ----------
    bits: int
        The number of bits used in the cheer.
    """
    bits: int


class Reply(TypedDict):
    """
    Represents a reply to a chat message.

    Attributes
    ----------
    parent_message_id: str
        The ID of the parent message being replied to.
    parent_message_body: str
        The body of the parent message.
    parent_user_id: str
        The ID of the user who sent the parent message.
    parent_user_name: str
        The name of the user who sent the parent message.
    parent_user_login: str
        The login name of the user who sent the parent message.
    thread_message_id: str
        The ID of the thread message in which the reply was made.
    thread_user_id: str
        The ID of the user who sent the thread message.
    thread_user_name: str
        The name of the user who sent the thread message.
    thread_user_login: str
        The login name of the user who sent the thread message.
    """
    parent_message_id: str
    parent_message_body: str
    parent_user_id: str
    parent_user_name: str
    parent_user_login: str
    thread_message_id: str
    thread_user_id: str
    thread_user_name: str
    thread_user_login: str


class MessageEvent(SpecificBroadcaster):
    """
    Represents a chat message event.

    Attributes
    ----------
    chatter_user_id: str
        The ID of the user who sent the message.
    chatter_user_name: str
        The name of the user who sent the message.
    chatter_user_login: str
        The login name of the user who sent the message.
    message_id: str
        A UUID that identifies the message.
    message: Message
        The structured chat message content.
        - text: str
            The plain text of the message.
        - fragments: List[Fragment]
            An ordered list of message fragments (e.g., text, cheermotes, emotes, mentions).
    message_type: str
        The type of the message. Possible values include:

        - text
        - channel_points_highlighted
        - channel_points_sub_only
        - user_intro
        - power_ups_message_effect
        - power_ups_gigantified_emote
    badges: List[Badge]
        A list of badges associated with the user.
    cheer: Optional[Cheer]
        Metadata if the message includes a cheer.
    color: Optional[str]
        The color of the user's chat message, in hexadecimal RGB format (e.g., "#FF0000").
    reply: Optional[Reply]
        Details of a reply to a message, if applicable.
    channel_points_custom_reward_id: Optional[str]
        The ID of the custom reward associated with the message, if applicable.
    channel_points_animation_id: Optional[str]
        The ID of the animation associated with the channel points reward, if applicable.
    source_broadcaster_user_id: Optional[str]
        The broadcaster user ID of the channel the message was sent from,
        in case of a shared chat session.
    source_broadcaster_user_name: Optional[str]
        The user name of the broadcaster of the channel the message was sent from,
        in case of a shared chat session.
    source_broadcaster_user_login: Optional[str]
        The login of the broadcaster of the channel the message was sent from,
        in case of a shared chat session.
    source_message_id: Optional[str]
        The UUID that identifies the source message from the channel it was sent from,
        in case of a shared chat session.
    source_badges: Optional[List[Badge]]
        The list of chat badges for the chatter in the channel the message was sent from,
        in case of a shared chat session.
    is_source_only: Optional[bool]
        Determines if a message delivered during a shared chat session is only sent to the source channel.
        Has no effect if the message is not sent during a shared chat session.
    """
    chatter_user_id: str
    chatter_user_name: str
    chatter_user_login: str
    message_id: str
    message: Message
    message_type: Literal[
        'text',
        'channel_points_highlighted',
        'channel_points_sub_only',
        'user_intro',
        'power_ups_message_effect',
        'power_ups_gigantified_emote'
    ]
    badges: List[Badge]
    cheer: Optional[Cheer]
    color: Optional[str]
    reply: Optional[Reply]
    channel_points_custom_reward_id: Optional[str]
    channel_points_animation_id: Optional[str]
    source_broadcaster_user_id: Optional[str]
    source_broadcaster_user_name: Optional[str]
    source_broadcaster_user_login: Optional[str]
    source_message_id: Optional[str]
    source_badges: Optional[List[Badge]]
    is_source_only: Optional[bool]


class Sub(TypedDict):
    """
    Represents a subscription.

    Attributes
    ----------
    sub_tier: str
        The tier of the subscription.
    is_prime: bool
        Whether the subscription is a Prime subscription.
    duration_months: int
        The duration of the subscription in months.
    """
    sub_tier: str
    is_prime: bool
    duration_months: int


# Notification
class Resub(TypedDict):
    """
    Represents a resubscription.

    Attributes
    ----------
    cumulative_months: int
        The total number of months the user has subscribed.
    duration_months: int
        The duration of the resubscription in months.
    streak_months: int
        The number of months in the current streak.
    sub_tier: str
        The tier of the resubscription.
    is_prime: Optional[bool]
        Whether the resubscription is a Prime subscription, if applicable.
    is_gift: bool
        Whether the resubscription is a gift.
    gifter_is_anonymous: Optional[bool]
        Whether the gifter is anonymous, if applicable.
    gifter_user_id: Optional[str]
        The ID of the user who gifted the subscription, if applicable.
    gifter_user_name: Optional[str]
        The name of the user who gifted the subscription, if applicable.
    gifter_user_login: Optional[str]
        The login name of the user who gifted the subscription, if applicable.
    """
    cumulative_months: int
    duration_months: int
    streak_months: int
    sub_tier: str
    is_prime: Optional[bool]
    is_gift: bool
    gifter_is_anonymous: Optional[bool]
    gifter_user_id: Optional[str]
    gifter_user_name: Optional[str]
    gifter_user_login: Optional[str]


class SubGift(TypedDict):
    """
    Represents a subscription gift.

    Attributes
    ----------
    duration_months: int
        The duration of the gift subscription in months.
    cumulative_total: Optional[int]
        The total number of gifted subscriptions, if applicable.
    recipient_user_id: str
        The ID of the recipient of the gift subscription.
    recipient_user_name: str
        The name of the recipient of the gift subscription.
    recipient_user_login: str
        The login name of the recipient of the gift subscription.
    sub_tier: str
        The tier of the gift subscription.
    community_gift_id: Optional[str]
        The ID of the community gift, if applicable.
    """
    duration_months: int
    cumulative_total: Optional[int]
    recipient_user_id: str
    recipient_user_name: str
    recipient_user_login: str
    sub_tier: str
    community_gift_id: Optional[str]


class CommunitySubGift(TypedDict):
    """
    Represents a community subscription gift.

    Attributes
    ----------
    id: str
        The ID of the community gift.
    total: int
        The total number of subscriptions gifted to the community.
    sub_tier: str
        The tier of the gift subscriptions.
    cumulative_total: Optional[int]
        The cumulative total number of gifted subscriptions, if applicable.
    """
    id: str
    total: int
    sub_tier: str
    cumulative_total: Optional[int]


class GiftPaidUpgrade(TypedDict):
    """
    Represents a paid upgrade for a gifted subscription.

    Attributes
    ----------
    gifter_is_anonymous: bool
        Whether the gifter is anonymous.
    gifter_user_id: Optional[str]
        The ID of the user who gifted the upgrade, if applicable.
    gifter_user_name: Optional[str]
        The name of the user who gifted the upgrade, if applicable.
    gifter_user_login: Optional[str]
        The login name of the user who gifted the upgrade, if applicable.
    """
    gifter_is_anonymous: bool
    gifter_user_id: Optional[str]
    gifter_user_name: Optional[str]
    gifter_user_login: Optional[str]


class PrimePaidUpgrade(TypedDict):
    """
    Represents a paid upgrade for a Prime subscription.

    Attributes
    ----------
    sub_tier: str
        The tier of the upgraded Prime subscription.
    """
    sub_tier: str


class Raid(TypedDict):
    """
    Represents a raid event.

    Attributes
    ----------
    user_id: str
        The ID of the user who initiated the raid.
    user_name: str
        The name of the user who initiated the raid.
    user_login: str
        The login name of the user who initiated the raid.
    viewer_count: int
        The number of viewers participating in the raid.
    profile_image_url: str
        The URL of the user's profile image.
    """
    user_id: str
    user_name: str
    user_login: str
    viewer_count: int
    profile_image_url: str


class PayItForward(TypedDict):
    """
    Represents a Pay It Forward event.

    Attributes
    ----------
    gifter_is_anonymous: bool
        Whether the gifter is anonymous.
    gifter_user_id: Optional[str]
        The ID of the user who initiated the Pay It Forward, if applicable.
    gifter_user_name: Optional[str]
        The name of the user who initiated the Pay It Forward, if applicable.
    gifter_user_login: Optional[str]
        The login name of the user who initiated the Pay It Forward, if applicable.
    """
    gifter_is_anonymous: bool
    gifter_user_id: Optional[str]
    gifter_user_name: Optional[str]
    gifter_user_login: Optional[str]


class Announcement(TypedDict):
    """
    Represents an announcement event.

    Attributes
    ----------
    color: str
        The color of the announcement.
    """
    color: str



class NotificationEvent(SpecificBroadcaster):
    """
    Represents a notification event.

    Attributes
    ----------
    broadcaster_user_id: str
        ID of the broadcaster.
    broadcaster_user_name: str
        Name of the broadcaster.
    broadcaster_user_login: str
        Login of the broadcaster.
    chatter_user_id: str
        ID of the chatter.
    chatter_user_name: str
        Name of the chatter.
    chatter_user_login: str
        Login of the chatter.
    chatter_is_anonymous: bool
        Whether the chatter is anonymous.
    color: str
        Color of the notification.
    badges: List[Badge]
        Badges associated with the chatter.
    system_message: Optional[str]
        System message of the notification.
    message_id: str
        ID of the message.
    message: Message
        Content of the message.
    notice_type: str
        Type of the notification.
    sub: Optional[Sub]
        Subscription details, if applicable.
    resub: Optional[Resub]
        Resubscription details, if applicable.
    sub_gift: Optional[SubGift]
        Subscription gift details, if applicable.
    community_sub_gift: Optional[CommunitySubGift]
        Community subscription gift details, if applicable.
    gift_paid_upgrade: Optional[GiftPaidUpgrade]
        Paid upgrade for a gifted subscription, if applicable.
    prime_paid_upgrade: Optional[PrimePaidUpgrade]
        Paid upgrade for a Prime subscription, if applicable.
    raid: Optional[Raid]
        Raid event details, if applicable.
    unraid: Optional[SpecificUser]
        Unraid event details, if applicable.
    pay_it_forward: Optional[PayItForward]
        Pay It Forward event details, if applicable.
    announcement: Optional[Announcement]
        Announcement details, if applicable.
    charity_donation: Optional[CharityDonation]
        Charity donation details, if applicable.
    bits_badge_tier: Optional[BitsBadgeTier]
        Bits badge tier details, if applicable.
    source_broadcaster_user_id: Optional[str]
        ID of the source broadcaster, if different.
    source_broadcaster_user_name: Optional[str]
        Name of the source broadcaster, if different.
    source_broadcaster_user_login: Optional[str]
        Login of the source broadcaster, if different.
    source_message_id: Optional[str]
        ID of the source message, if different.
    source_badges: Optional[List[Badge]]
        Badges for the source chatter, if different.
    shared_chat_sub: Optional[Sub]
        Shared chat subscription details, if applicable.
    shared_chat_resub: Optional[Resub]
        Shared chat re-subscription details, if applicable.
    shared_chat_sub_gift: Optional[SubGift]
        Shared chat subscription gift details, if applicable.
    shared_chat_community_sub_gift: Optional[CommunitySubGift]
        Shared chat community subscription gift details, if applicable.
    shared_chat_gift_paid_upgrade: Optional[GiftPaidUpgrade]
        Shared chat paid upgrade for a gifted subscription, if applicable.
    shared_chat_prime_paid_upgrade: Optional[PrimePaidUpgrade]
        Shared chat paid upgrade for a Prime subscription, if applicable.
    shared_chat_pay_it_forward: Optional[PayItForward]
        Shared chat Pay It Forward event details, if applicable.
    shared_chat_raid: Optional[Raid]
        Shared chat raid event details, if applicable.
    shared_chat_announcement: Optional[Announcement]
        Shared chat announcement details, if applicable.
    """
    tier: int
    chatter_user_id: str
    chatter_user_name: str
    chatter_user_login: str
    chatter_is_anonymous: bool
    color: str
    badges: List[Badge]
    system_message: Optional[str]
    message_id: str
    message: Message
    notice_type: str
    sub: Optional[Sub]
    resub: Optional[Resub]
    sub_gift: Optional[SubGift]
    community_sub_gift: Optional[CommunitySubGift]
    gift_paid_upgrade: Optional[GiftPaidUpgrade]
    prime_paid_upgrade: Optional[PrimePaidUpgrade]
    pay_it_forward: Optional[PayItForward]
    raid: Optional[Raid]
    unraid: Optional[SpecificUser]
    announcement: Optional[Announcement]
    bits_badge_tier: Optional[BitsBadgeTier]
    charity_donation: Optional[CharityDonation]
    source_broadcaster_user_id: Optional[str]
    source_broadcaster_user_name: Optional[str]
    source_broadcaster_user_login: Optional[str]
    source_message_id: Optional[str]
    source_badges: Optional[List[Badge]]
    shared_chat_sub: Optional[Sub]
    shared_chat_resub: Optional[Resub]
    shared_chat_sub_gift: Optional[SubGift]
    shared_chat_community_sub_gift: Optional[CommunitySubGift]
    shared_chat_gift_paid_upgrade: Optional[GiftPaidUpgrade]
    shared_chat_prime_paid_upgrade: Optional[PrimePaidUpgrade]
    shared_chat_pay_it_forward: Optional[PayItForward]
    shared_chat_raid: Optional[Raid]
    shared_chat_announcement: Optional[Announcement]


# Settings
class SettingsUpdateEvent(SpecificBroadcaster):
    """
    Represents an event where chat settings are updated.

    Attributes
    ----------
    emote_mode: bool
        Whether emote mode is enabled.
    follower_mode: bool
        Whether follower mode is enabled.
    follower_mode_duration_minutes: Optional[int]
        The duration of follower mode in minutes, if applicable.
    slow_mode: bool
        Whether slow mode is enabled.
    slow_mode_wait_time_seconds: Optional[int]
        The wait time for slow mode in seconds, if applicable.
    subscriber_mode: bool
        Whether subscriber mode is enabled.
    unique_chat_mode: bool
        Whether unique chat mode is enabled.
    """
    emote_mode: bool
    follower_mode: bool
    follower_mode_duration_minutes: Optional[int]
    slow_mode: bool
    slow_mode_wait_time_seconds: Optional[int]
    subscriber_mode: bool
    unique_chat_mode: bool



    class Emote(TypedDict):
    """
    Represents an emote with its ID and availability times.

    Attributes
    ----------
    id: str
        The ID of the emote.
    begin: int
        The start time of the emotes availability, in Unix timestamp format.
    end: int
        The end time of the emotes availability, in Unix timestamp format.
    """
    id: str
    begin: int
    end: int


class AutomaticReward(TypedDict):
    """
    Represents an automatic reward with its type and details.

    Attributes
    ----------
    type: str
        The type of event. Possible values include:

        - single_message_bypass_sub_mode
        - send_highlighted_message
        - random_sub_emote_unlock
        - chosen_sub_emote_unlock
        - chosen_modified_sub_emote_unlock
        - message_effect
        - gigantify_an_emote
        - celebration
    cost: int
        The cost of the reward in channel points or other currency.
    unlocked_emote: Optional[UnlockedEmote]
        Details of an emote unlocked by the reward, if applicable.
    """
    type: Literal['single_message_bypass_sub_mode',
                  'send_highlighted_message',
                  'random_sub_emote_unlock',
                  'chosen_sub_emote_unlock',
                  'chosen_modified_sub_emote_unlock',
                  'message_effect',
                  'gigantify_an_emote',
                  'celebration']
    cost: int
    unlocked_emote: Optional[UnlockedEmote]


class AutomaticRewardRedemptionAddEvent(SpecificBroadcaster, SpecificUser):
    """
    Represents an event where an automatic reward is redeemed.

    Attributes
    ----------
    id: str
        The ID of the reward redemption event.
    reward: AutomaticReward
        The details of the automatic reward redeemed.
    message: TextEmoteMessage
        The message associated with the reward redemption.
    user_input: Optional[str]
        Additional user input, if any, provided during the redemption.
    redeemed_at: str
        The timestamp when the reward was redeemed, in ISO 8601 format.
    """
    id: str
    reward: AutomaticReward
    message: TextEmoteMessage
    user_input: Optional[str]
    redeemed_at: str


class Image(TypedDict):
    """
    Represents an image with multiple resolution options.

    Attributes
    ----------
    url_1x: Optional[str]
        URL of the image at 1x resolution.
    url_2x: Optional[str]
        URL of the image at 2x resolution.
    url_4x: Optional[str]
        URL of the image at 4x resolution.
    """
    url_1x: Optional[str]
    url_2x: Optional[str]
    url_4x: Optional[str]


class PointRewardEvent(SpecificBroadcaster):
    """
    Represents custom point reward event.

    Attributes
    ----------
    id: str
        The ID of the reward.
    is_enabled: bool
        Whether the reward is currently enabled.
    is_paused: bool
        Whether the reward is currently paused.
    is_in_stock: bool
        Whether the reward is in stock.
    title: str
        The title of the reward.
    cost: int
        The cost of the reward in channel points or other currency.
    prompt: str
        The prompt or description for the reward.
    is_user_input_required: bool
        Whether user input is required to redeem the reward.
    should_redemptions_skip_request_queue: bool
        Whether redemptions should skip the request queue.
    max_per_stream: Optional[int]
        The maximum number of redemptions allowed per stream, if applicable.
    max_per_user_per_stream: Optional[int]
        The maximum number of redemptions allowed per user per stream, if applicable.
    background_color: Optional[str]
        The background color of the reward's display.
    image: Optional[Image]
        The image associated with the reward.
    default_image: Optional[Image]
        The default image to display for the reward.
    global_cooldown: Optional[int]
        The global cooldown for the reward, in seconds.
    cooldown_expires_at: Optional[str]
        The timestamp when the cooldown expires, in ISO 8601 format.
    redemptions_redeemed_current_stream: Optional[int]
        The number of redemptions redeemed in the current stream.
    """
    id: str
    is_enabled: bool
    is_paused: bool
    is_in_stock: bool
    title: str
    cost: int
    prompt: str
    is_user_input_required: bool
    should_redemptions_skip_request_queue: bool
    max_per_stream: Optional[int]
    max_per_user_per_stream: Optional[int]
    background_color: Optional[str]
    image: Optional[Image]
    default_image: Optional[Image]
    global_cooldown: Optional[int]
    cooldown_expires_at: Optional[str]
    redemptions_redeemed_current_stream: Optional[int]


class RedemptionMessageEmote(TypedDict):
    """
    Represents metadata about an emote.

    Attributes
    ----------
    id: str
        The unique identifier for the emote.
    name: str
        The human-readable emote token.
    """
    id: str
    name: str


class RedemptionFragment(TypedDict):
    """
    Represents a fragment of a chat message.

    Attributes
    ----------
    text: str
        The message text within the fragment.
    type: Literal["text", "emote"]
        The type of fragment (text or emote).
    emote: Optional[Emote]
        Metadata about the emote if the fragment contains one.
    """
    text: str
    type: Literal["text", "emote"]
    emote: Optional[RedemptionMessageEmote]


class RedemptionMessage(TypedDict):
    """
    Represents a chat message with potential emotes.

    Attributes
    ----------
    text: str
        The complete message in plain text.
    fragments: List[Fragment]
        The ordered list of message fragments.
    """
    text: str
    fragments: List[RedemptionFragment]

class RewardInfo(TypedDict):
    """
    Represents information about the reward redeemed by the user.

    Attributes
    ----------
    type: Literal["single_message_bypass_sub_mode", "send_highlighted_message",
                  "random_sub_emote_unlock", "chosen_sub_emote_unlock",
                  "chosen_modified_sub_emote_unlock"]
        The type of reward redeemed.
    channel_points: int
        The number of channel points used to redeem the reward.
    emote: Optional[Emote]
        The associated emote for the reward, if available.
    message: Optional[Message]
        The associated message and emote information for the reward.
    """
    type: Literal["single_message_bypass_sub_mode", "send_highlighted_message",
                  "random_sub_emote_unlock", "chosen_sub_emote_unlock",
                  "chosen_modified_sub_emote_unlock"]
    channel_points: int
    emote: Optional[Emote]
    message: Optional[RedemptionMessage]


class RewardRedemptionEvent(SpecificBroadcaster, SpecificUser):
    """
    Represents a channel points redemption event.

    Attributes
    ----------
    id: str
        The unique identifier for the redemption event.
    reward: Reward
        The reward information associated with the redemption.
    redeemed_at: str
        The UTC date and time (in RFC3339 format) of when the reward was redeemed.
    """
    id: str
    reward: RewardInfo
    redeemed_at: str


# Poll
class Choice(TypedDict):
    """
    Represents a choice in a poll.

    Attributes
    ----------
    id: str
        The ID of the choice.
    title: str
        The title of the choice.
    bits_votes: int
        The number of votes cast with bits for this choice.
    channel_points_votes: int
        The number of votes cast with channel points for this choice.
    """
    id: str
    title: str
    bits_votes: int
    channel_points_votes: int


class Voting(TypedDict):
    """
    Represents the voting configuration for a poll.

    Attributes
    ----------
    is_enabled: bool
        Whether voting is enabled for the poll.
    amount_per_vote: int
        The amount of currency required per vote.
    """
    is_enabled: bool
    amount_per_vote: int


class PollBase(SpecificBroadcaster):
    """
    Represents the base attributes for a poll.

    Attributes
    ----------
    id: str
        The ID of the poll.
    title: str
        The title of the poll.
    choices: List[Choice]
        A list of choices available in the poll.
    bits_voting: Voting
        The voting configuration for bits.
    channel_points_voting: Voting
        The voting configuration for channel points.
    started_at: str
        The timestamp when the poll started, in ISO 8601 format.
    """
    id: str
    title: str
    choices: List[Choice]
    bits_voting: Voting
    channel_points_voting: Voting
    started_at: str


class PollBeginEvent(PollBase):
    """
    Represents an event where a poll begins.

    Attributes
    ----------
    ends_at: str
        The timestamp when the poll ends, in ISO 8601 format.
    """
    ends_at: str


class PollProgressEvent(PollBase):
    """
    Represents an event where a poll is in progress.

    Attributes
    ----------
    ends_at: str
        The timestamp when the poll ends, in ISO 8601 format.
    """
    ends_at: str


class PollEndEvent(PollBase):
    """
    Represents an event where a poll ends.

    Attributes
    ----------
    status: Literal['completed', 'archived', 'terminated']
        The status of the poll at the end.
    ended_at: str
        The timestamp when the poll ended, in ISO 8601 format.
    """
    status: Literal['completed', 'archived', 'terminated']
    ended_at: str


# Prediction
class TopPredictor(SpecificUser):
    """
    Represents a top predictor in a prediction.

    Attributes
    ----------
    channel_points_used: int
        The amount of channel points used by the top predictor.
    channel_points_won: Optional[int]
        The amount of channel points won by the top predictor, if applicable.
    """
    channel_points_used: int
    channel_points_won: Optional[int]


class Outcome(TypedDict):
    """
    Represents an outcome in a prediction.

    Attributes
    ----------
    id: str
        The ID of the outcome.
    title: str
        The title of the outcome.
    color: Literal['BLUE', 'PINK']
        The color associated with the outcome.
    users: int
        The number of users who predicted this outcome.
    channel_points: int
        The total channel points associated with this outcome.
    top_predictors: Optional[List[TopPredictor]]
        A list of top predictors for this outcome, if applicable.
    """
    id: str
    title: str
    color: Literal['BLUE', 'PINK']
    users: int
    channel_points: int
    top_predictors: Optional[List[TopPredictor]]


class PredictionBase(SpecificBroadcaster):
    """
    Represents the base attributes for a prediction.

    Attributes
    ----------
    id: str
        The ID of the prediction.
    title: str
        The title of the prediction.
    outcomes: List[Outcome]
        A list of outcomes for the prediction.
    started_at: str
        The timestamp when the prediction started, in ISO 8601 format.
    """
    id: str
    title: str
    outcomes: List[Outcome]
    started_at: str


class PredictionBeginEvent(PredictionBase):
    """
    Represents an event where a prediction begins.

    Attributes
    ----------
    locks_at: str
        The timestamp when the prediction locks, in ISO 8601 format.
    """
    locks_at: str


class PredictionProgressEvent(PredictionBase):
    """
    Represents an event where a prediction is in progress.

    Attributes
    ----------
    locks_at: str
        The timestamp when the prediction locks, in ISO 8601 format.
    """
    locks_at: str


class PredictionLockEvent(PredictionBase):
    """
    Represents an event where a prediction locks.

    Attributes
    ----------
    locked_at: str
        The timestamp when the prediction was locked, in ISO 8601 format.
    """
    locked_at: str


class PredictionEndEvent(PredictionBase):
    """
    Represents an event where a prediction ends.

    Attributes
    ----------
    winning_outcome_id: str
        The ID of the winning outcome.
    status: Literal['resolved', 'canceled']
        The status of the prediction at the end.
    ended_at: str
        The timestamp when the prediction ended, in ISO 8601 format.
    """
    winning_outcome_id: str
    status: Literal['resolved', 'canceled']
    ended_at: str


# HypeTrain
class Contribution(SpecificUser):
    """
    Represents a contribution to a Hype Train.

    Attributes
    ----------
    type: Literal['bits', 'subscription']
        The type of contribution.
    total: int
        The total amount of the contribution.
    """
    type: Literal['bits', 'subscription']
    total: int


class HypeTrainEvent(SpecificBroadcaster):
    """
    Represents a Hype Train event.

    Attributes
    ----------
    id: str
        The ID of the Hype Train event.
    total: int
        The total amount of contributions to the Hype Train.
    progress: int
        The current progress of the Hype Train.
    goal: int
        The goal amount for the Hype Train.
    top_contributions: List[Contribution]
        A list of top contributions to the Hype Train.
    last_contribution: Contribution
        The most recent contribution to the Hype Train.
    is_golden_kappa_train: bool
        Indicates if the Hype Train is a Golden Kappa Train.
    started_at: str
        The timestamp when the Hype Train started, in ISO 8601 format.
    expires_at: str
        The timestamp when the Hype Train expires, in ISO 8601 format.
    """
    id: str
    total: int
    progress: int
    goal: int
    top_contributions: List[Contribution]
    last_contribution: Contribution
    is_golden_kappa_train: bool
    started_at: str
    expires_at: str



class HypeTrainEndEvent(SpecificBroadcaster):
    """
    Represents an event where a Hype Train ends.

    Attributes
    ----------
    id: str
        The ID of the Hype Train event.
    level: int
        The level reached by the Hype Train.
    total: int
        The total amount of contributions to the Hype Train.
    top_contributions: List[Contribution]
        A list of top contributions to the Hype Train.
    is_golden_kappa_train: bool
        Indicates if the Hype Train is a Golden Kappa Train.
    started_at: str
        The timestamp when the Hype Train started, in ISO 8601 format.
    ended_at: str
        The timestamp when the Hype Train ended, in ISO 8601 format.
    cooldown_ends_at: str
        The timestamp when the cooldown period ends, in ISO 8601 format.
    """
    id: str
    level: int
    total: int
    top_contributions: List[Contribution]
    is_golden_kappa_train: bool
    started_at: str
    ended_at: str
    cooldown_ends_at: str


class RaidEvent(TypedDict):
    """
    Represents an event where a raid occurs.

    Attributes
    ----------
    from_broadcaster_user_id: str
        The user ID of the broadcaster initiating the raid.
    from_broadcaster_user_login: str
        The login name of the broadcaster initiating the raid.
    from_broadcaster_user_name: str
        The display name of the broadcaster initiating the raid.
    to_broadcaster_user_id: str
        The user ID of the broadcaster receiving the raid.
    to_broadcaster_user_login: str
        The login name of the broadcaster receiving the raid.
    to_broadcaster_user_name: str
        The display name of the broadcaster receiving the raid.
    viewers: int
        The number of viewers participating in the raid.
    """
    from_broadcaster_user_id: str
    from_broadcaster_user_login: str
    from_broadcaster_user_name: str
    to_broadcaster_user_id: str
    to_broadcaster_user_login: str
    to_broadcaster_user_name: str
    viewers: int


class ShoutoutCreateEvent(SpecificBroadcaster, SpecificModerator):
    """
    Represents an event where a shoutout is created.

    Attributes
    ----------
    to_broadcaster_user_id: str
        The user ID of the broadcaster receiving the shoutout.
    to_broadcaster_user_login: str
        The login name of the broadcaster receiving the shoutout.
    to_broadcaster_user_name: str
        The display name of the broadcaster receiving the shoutout.
    viewer_count: int
        The number of viewers when the shoutout was created.
    started_at: str
        The timestamp when the shoutout started, in ISO 8601 format.
    cooldown_ends_at: str
        The timestamp when the cooldown period for the shoutout ends, in ISO 8601 format.
    target_cooldown_ends_at: str
        The timestamp when the target cooldown period ends, in ISO 8601 format.
    """
    to_broadcaster_user_id: str
    to_broadcaster_user_login: str
    to_broadcaster_user_name: str
    viewer_count: int
    started_at: str
    cooldown_ends_at: str
    target_cooldown_ends_at: str


class ShoutoutReceivedEvent(SpecificBroadcaster):
    """
    Represents an event where a shoutout is received.

    Attributes
    ----------
    from_broadcaster_user_id: str
        The user ID of the broadcaster who sent the shoutout.
    from_broadcaster_user_login: str
        The login name of the broadcaster who sent the shoutout.
    from_broadcaster_user_name: str
        The display name of the broadcaster who sent the shoutout.
    viewer_count: int
        The number of viewers when the shoutout was received.
    started_at: str
        The timestamp when the shoutout was received, in ISO 8601 format.
    """
    from_broadcaster_user_id: str
    from_broadcaster_user_login: str
    from_broadcaster_user_name: str
    viewer_count: int
    started_at: str


# Stream
class StreamOnlineEvent(SpecificBroadcaster):
    """
    Represents an event where a stream goes online.

    Attributes
    ----------
    id: str
        The ID of the stream.
    type: Literal['live', 'playlist', 'watch_party', 'premiere', 'rerun']
        The type of the stream.
    started_at: s²tr
        The timestamp when the stream started, in ISO 8601 format.
    """
    id: str
    type: Literal['live', 'playlist', 'watch_party', 'premiere', 'rerun']
    started_at: str


class StreamOfflineEvent(SpecificBroadcaster):
    """
    Represents an event where a stream goes offline.

    Attributes
    ----------
    (No additional attributes; inherits from SpecificBroadcaster)
    """
    pass
